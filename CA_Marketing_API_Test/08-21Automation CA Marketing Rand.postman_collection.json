{
	"info": {
		"_postman_id": "f4d412e0-4945-4595-862c-70738caa5643",
		"name": "08-21Automation CA Marketing Rand",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create New Postal Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorized, Check access tokenor Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"forbidden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not found. Check if you madecorrect request\"] = false;\r",
							"} else if (responseCode.code === 422) {   \r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"ID\", jsonData.id);\r",
							"\r",
							"pm.test(\"ID is correct\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"//new tests\r",
							"tests['Response code is 200 ok'] = responseCode.code === 200;\r",
							"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
							"\r",
							"pm.test(\"Response size is less than 10KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);\r",
							"});\r",
							"\r",
							"//Response Header Tests\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Content-Length\", \"45\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"//Response body tests\r",
							"pm.test(\"Response should be ok to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});    \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.clear;\r",
							"\r",
							"//returns a random integer from 10000 to 90000 with 5 digits\r",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000);\r",
							"\r",
							"//returns a random integer from 100 to 900 with 3 digits\r",
							"pm.environment.set(\"address.Line2\", Math.floor(Math.random()*900) + 100);\r",
							"\r",
							"const stateAbbreviations = [\r",
							" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
							" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
							" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
							" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
							" 'VT','VI','VA','WA','WV','WI','WY'\r",
							"];\r",
							"\r",
							"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
							"pm.environment.set(\"subdivision\", randomState);\r",
							"\r",
							"let fName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstName\", fName);\r",
							"\r",
							"let lName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastName\", lName);\r",
							"\r",
							"let co = pm.variables.replaceIn(\"{{$randomCompanyName}}\")\r",
							"pm.environment.set(\"company\", co);\r",
							"\r",
							"let addrLn1 = pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
							"pm.environment.set(\"addressLine1\", addrLn1);\r",
							"\r",
							"let cty = pm.variables.replaceIn(\"{{$randomCity}}\")\r",
							"pm.environment.set(\"city\", cty);\r",
							"\r",
							"let cntry = pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
							"pm.environment.set(\"country\", cntry);\r",
							"\r",
							"let phoneNum = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")\r",
							"pm.environment.set(\"phoneNumber\", phoneNum);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "3GgrqoWgCDjQGx3dUt00DRdopAKvuT3LIz6Qscj_l9c.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTI1VDIyOjE1OjQzLjg4MFoiLCJ1aWQiOiIzNDkwNWFiYy03OTEyLTQxNWYtOWRmOS05OTU3MWI3YjUzNzkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjgyMWQyZGNiLWIwMGEtNDJhYy05N2NmLTQ5NDNkYjAyNTczMSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yNlQwMjoxNTo0My44ODBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"{{firstName}}\",\r\n            \"lastName\": \"{{lastName}}\"\r\n        },\r\n        \"company\": \"{{company}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"{{addressLine2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{city}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"subdivision\": \"{{subdivision}}\",\r\n        \"zipCode\": \"{{zipCode}}\",\r\n        \"phoneNumber\": \"{{phoneNumber}}\",\r\n        \"location\": {\r\n            \"latitude\": 40.7411831,\r\n            \"longitude\": -73.91648959999999\r\n        }\r\n    },\r\n    \"setAsDefault\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorized, Check access tokenor Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"forbidden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not found. Check if you madecorrect request\"] = false;\r",
							"} else if (responseCode.code === 422) {   \r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"//new tests\r",
							"tests['Response code is 200 ok'] = responseCode.code === 200;\r",
							"tests['Response Time is Acceptable'] = responseTime < 1000;;\r",
							"\r",
							"pm.test(\"Response size is less than 10KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);\r",
							"});\r",
							"\r",
							"//Response Header Tests\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Content-Length\", \"2\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"New ID is in response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"{{ID}}\")\r",
							"});  \r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"//Response body tests\r",
							"pm.test(\"Response should be ok to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"    pm.response.to.have.jsonBody({});\r",
							"});    \r",
							"\r",
							"pm.test(\"Body matches string '{}'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "3GgrqoWgCDjQGx3dUt00DRdopAKvuT3LIz6Qscj_l9c.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTI1VDIyOjE1OjQzLjg4MFoiLCJ1aWQiOiIzNDkwNWFiYy03OTEyLTQxNWYtOWRmOS05OTU3MWI3YjUzNzkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjgyMWQyZGNiLWIwMGEtNDJhYy05N2NmLTQ5NDNkYjAyNTczMSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yNlQwMjoxNTo0My44ODBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/default",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show all addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorized, Check access tokenor Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"forbidden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not found. Check if you madecorrect request\"] = false;\r",
							"} else if (responseCode.code === 422) {   \r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"//new tests\r",
							"tests['Response code is 200 ok'] = responseCode.code === 200;\r",
							"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
							"\r",
							"pm.test(\"Response size is less than 10KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);\r",
							"});\r",
							"\r",
							"//Response body tests\r",
							"pm.test(\"Response should be ok to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});    \r",
							"\r",
							"pm.test(\"New ID is in response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});  \r",
							"\r",
							"//Response Header Tests\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "3GgrqoWgCDjQGx3dUt00DRdopAKvuT3LIz6Qscj_l9c.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTI1VDIyOjE1OjQzLjg4MFoiLCJ1aWQiOiIzNDkwNWFiYy03OTEyLTQxNWYtOWRmOS05OTU3MWI3YjUzNzkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjgyMWQyZGNiLWIwMGEtNDJhYy05N2NmLTQ5NDNkYjAyNTczMSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yNlQwMjoxNTo0My44ODBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorized, Check access tokenor Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"forbidden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not found. Check if you madecorrect request\"] = false;\r",
							"} else if (responseCode.code === 422) {   \r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Size is less than 1000B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"//Response body tests\r",
							"pm.test(\"Response should be ok to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"    pm.response.to.have.jsonBody({});\r",
							"});    \r",
							"\r",
							"pm.test(\"Check isDefaultAddress\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(true);\r",
							"});  \r",
							"\r",
							"\r",
							"pm.test(\"ID is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Entire response is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"))\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));\r",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));\r",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));\r",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));\r",
							"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));\r",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));\r",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));\r",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));\r",
							"    pm.expect(jsonData.address.addressLine2).to.eql(pm.environment.get(\"addressLine2\"));\r",
							"});  \r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address).to.be.a('object');\r",
							"    pm.expect(jsonData.address.id).to.be.a('string');\r",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');\r",
							"    pm.expect(jsonData.address.country).to.be.a('string');\r",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');\r",
							"    pm.expect(jsonData.address.city).to.be.a('string');\r",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');\r",
							"    pm.expect(jsonData.address.PhoneNumber).to.be.a('string');\r",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');\r",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');\r",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"//Response Header Tests\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "3GgrqoWgCDjQGx3dUt00DRdopAKvuT3LIz6Qscj_l9c.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTI1VDIyOjE1OjQzLjg4MFoiLCJ1aWQiOiIzNDkwNWFiYy03OTEyLTQxNWYtOWRmOS05OTU3MWI3YjUzNzkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjgyMWQyZGNiLWIwMGEtNDJhYy05N2NmLTQ5NDNkYjAyNTczMSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yNlQwMjoxNTo0My44ODBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify Existing Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorized, Check access tokenor Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"forbidden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not found. Check if you madecorrect request\"] = false;\r",
							"} else if (responseCode.code === 422) {   \r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"//new tests\r",
							"tests['Response code is 200 ok'] = responseCode.code === 200;\r",
							"tests['Response Time is Acceptable'] = responseTime < 1000;\r",
							"\r",
							"//Response Header Tests\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");\r",
							"});\r",
							"\r",
							"//Response body tests\r",
							"pm.test(\"Address has been updated, ok\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"    pm.response.to.have.jsonBody({});\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"company\", \"Google-\" + new Date().getTime())\r",
							"\r",
							"pm.environment.set(\"zipCode\", Math.floor(Math.random()*90000) + 10000)\r",
							"\r",
							"pm.environment.set(\"addressLine2\", Math.floor(Math.random()*900) + 100)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "3GgrqoWgCDjQGx3dUt00DRdopAKvuT3LIz6Qscj_l9c.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTI1VDIyOjE1OjQzLjg4MFoiLCJ1aWQiOiIzNDkwNWFiYy03OTEyLTQxNWYtOWRmOS05OTU3MWI3YjUzNzkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjgyMWQyZGNiLWIwMGEtNDJhYy05N2NmLTQ5NDNkYjAyNTczMSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yNlQwMjoxNTo0My44ODBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": {\r\n        \"id\": \"{{ID}}\",\r\n        \"fullName\": {\r\n            \"firstName\": \"{{firstName}}\",\r\n            \"lastName\": \"{{lastName}}\"\r\n        },\r\n        \"company\": \"{{company}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{addressLine1}}\",\r\n        \"addressLine2\": \"{{addressLine2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{city}}\",\r\n        \"country\": \"{{country}}\",\r\n        \"subdivision\": \"{{subdivision}}\",\r\n        \"zipCode\": \"{{zipCode}}\",\r\n        \"phoneNumber\": \"{{phoneNumber}}\"\r\n    },\r\n    \"setAsDefault\": false,\r\n    \"fieldMask\": {\r\n        \"paths\": [\"fullName.firstName\", \"fullName.lastName\", \"company\", \"addressLine1\", \"addressLine2\", \"city\", \"country\", \"subdivision\", \"zipCode\", \"phoneNumber\", \"setAsDefault\"]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show changed address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorized, Check access tokenor Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"forbidden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not found. Check if you madecorrect request\"] = false;\r",
							"} else if (responseCode.code === 422) {   \r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"\r",
							"//Response body tests\r",
							"pm.test(\"Response should be ok to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"    pm.response.to.have.jsonBody({});\r",
							"});    \r",
							"\r",
							"//Access by text filter\r",
							"pm.test(\"company is Google\", function(){\r",
							"    pm.expect(pm.response.test()).to.include(\"company\", pm.environment.get(\"company\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Entire response is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"firstName\"))\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"lastName\"));\r",
							"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"country\"));\r",
							"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"subdivision\"));\r",
							"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"city\"));\r",
							"    pm.expect(jsonData.address.zipCode).to.eql('' + pm.environment.get(\"zipCode\"));\r",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"phoneNumber\"));\r",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"company\"));\r",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"addressLine1\"));\r",
							"    pm.expect(jsonData.address.addressLine2).to.eql(pm.environment.get(\"addressLine2\"));\r",
							"});  \r",
							"\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address).to.be.a('object');\r",
							"    pm.expect(jsonData.address.id).to.be.a('string');\r",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');\r",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');\r",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');\r",
							"    pm.expect(jsonData.address.country).to.be.a('string');\r",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');\r",
							"    pm.expect(jsonData.address.city).to.be.a('string');\r",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');\r",
							"    pm.expect(jsonData.address.PhoneNumber).to.be.a('string');\r",
							"    pm.expect(jsonData.address.company).to.be.a('string');\r",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');\r",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');\r",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"//Response Header Tests\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "3GgrqoWgCDjQGx3dUt00DRdopAKvuT3LIz6Qscj_l9c.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTI1VDIyOjE1OjQzLjg4MFoiLCJ1aWQiOiIzNDkwNWFiYy03OTEyLTQxNWYtOWRmOS05OTU3MWI3YjUzNzkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjgyMWQyZGNiLWIwMGEtNDJhYy05N2NmLTQ5NDNkYjAyNTczMSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yNlQwMjoxNTo0My44ODBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorized, Check access tokenor Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"forbidden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not found. Check if you madecorrect request\"] = false;\r",
							"} else if (responseCode.code === 422) {   \r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1000B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//Response Header Tests\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");\r",
							"});\r",
							"\r",
							"//Response body tests\r",
							"pm.test(\"Order has been deleted, ok\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.be.ok\r",
							"    pm.response.to.be.an('object')\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"    pm.response.to.have.jsonBody({});\r",
							"});    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "3GgrqoWgCDjQGx3dUt00DRdopAKvuT3LIz6Qscj_l9c.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTI1VDIyOjE1OjQzLjg4MFoiLCJ1aWQiOiIzNDkwNWFiYy03OTEyLTQxNWYtOWRmOS05OTU3MWI3YjUzNzkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjgyMWQyZGNiLWIwMGEtNDJhYy05N2NmLTQ5NDNkYjAyNTczMSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yNlQwMjoxNTo0My44ODBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete deleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = false;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorized, Check access tokenor Log in\"] = false;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad request 400 is ok\"] = true;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"forbidden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not found. Check if you madecorrect request\"] = false;\r",
							"} else if (responseCode.code === 422) {   \r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = true;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 1000B\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//Access by text filter\r",
							"pm.test(\"Message to include previously deleted ID\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"message\", pm.environment.get(\"ID\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Can't find = ID\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: \" + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"'Details' is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.details.cant_find).to.eql(\"address_id: 9589e4ce-efd5-4532-b4b5-2f58c25a90fa\");\r",
							"});\r",
							"\r",
							"//Response body tests\r",
							"pm.test(\"Response should be ok to process\", function () {\r",
							"    pm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});   \r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.be.a('string');\r",
							"    pm.expect(jsonData.details).to.be.a('object');\r",
							"    pm.expect(jsonData.details.cant_find).to.be.a('string');\r",
							"});  \r",
							"\r",
							"//Response Header Tests\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.15.10\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "3GgrqoWgCDjQGx3dUt00DRdopAKvuT3LIz6Qscj_l9c.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTI1VDIyOjE1OjQzLjg4MFoiLCJ1aWQiOiIzNDkwNWFiYy03OTEyLTQxNWYtOWRmOS05OTU3MWI3YjUzNzkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjgyMWQyZGNiLWIwMGEtNDJhYy05N2NmLTQ5NDNkYjAyNTczMSIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0yNlQwMjoxNTo0My44ODBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://addresses.wixapps.net/_api/addresses-web/v1/addresses/{{ID}}",
					"protocol": "https",
					"host": [
						"addresses",
						"wixapps",
						"net"
					],
					"path": [
						"_api",
						"addresses-web",
						"v1",
						"addresses",
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	]
}